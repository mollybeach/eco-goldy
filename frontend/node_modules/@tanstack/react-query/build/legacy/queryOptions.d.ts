import { DefaultError, QueryKey } from '@tanstack/query-core';
import { UseQueryOptions } from './types.js';

type UndefinedInitialDataOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {
    initialData?: undefined;
};
type NonUndefinedGuard<T> = T extends undefined ? never : T;
type DefinedInitialDataOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {
    initialData: NonUndefinedGuard<TQueryFnData> | (() => NonUndefinedGuard<TQueryFnData>);
};
type ValidateQueryOptions<T> = {
    [K in keyof T]: K extends keyof UseQueryOptions ? T[K] : never;
};
declare function queryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TOptions extends UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey> = UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>>(options: ValidateQueryOptions<TOptions>): TOptions;
declare function queryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TOptions extends DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey> = DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>>(options: ValidateQueryOptions<TOptions>): TOptions;

export { DefinedInitialDataOptions, UndefinedInitialDataOptions, queryOptions };
